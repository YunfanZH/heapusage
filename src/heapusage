#!/bin/bash

# Copyright (C) 2017 Kristofer Berggren
# All rights reserved.
#
# heapusage is distributed under the BSD 3-Clause license, see LICENSE for details.

showusage()
{
  echo "Heapusage is a light-weight tool for finding memory leaks and more"
  echo "generally checking heap usage in applications."
  echo ""
  echo "Usage: heapusage [-m minsize] [-n] [-o path] PROG [ARGS..]"
  echo "   or: heapusage --help"
  echo "   or: heapusage --version"
  echo ""
  echo "Options:"
  echo "   -m <minsize>    minimum leak in bytes for detailed reporting"
  echo "   -n              no symbol lookup (faster)"
  echo "   -o <path>       write output to specified file path, instead of stderr"
  echo "   PROG            program to run and analyze"
  echo "   [ARGS]          optional arguments to the program"
  echo "   --help          display this help and exit"
  echo "   --version       output version information and exit"
  echo ""
  echo "Examples:"
  echo "heapusage ls"
  echo ""
  echo "executes the program 'ls' and measures its heap usage."
  echo ""
  echo "Report bugs at https://github.com/d99kris/heapusage"
  echo ""
}

showversion()
{
  echo "heapusage v1.0"
  echo ""
  echo "Copyright (C) 2017 Kristofer Berggren"
  echo ""
  echo "heapusage is distributed under the BSD 3-Clause license."
  echo ""
  echo "Written by Kristofer Berggren"
}

# Arguments - special cases
if [ "${1}" == "--help" ] ; then
  showusage
  exit 0
elif [ "${1}" == "--version" ] ; then
  showversion
  exit 0
elif [ "${#}" == "0" ] ; then
  showusage
  exit 1
fi

# Arguments - regular options
MINLEAK="0"
NOSYMS="0"
OUTFILE=""
while getopts "?m:no:" OPT; do
  case "${OPT}" in
  \?)
    showusage
    exit 1
    ;;
  m)
    MINLEAK="${OPTARG}"
    ;;
  n)
    NOSYMS="1"
    ;;
  o)
    OUTFILE="${OPTARG}"
    ;;
  esac
done
shift $((OPTIND-1))
[ "$1" = "--" ] && shift

# Arguments - ensure program specified
if [ "${#}" == "0" ] ; then
  showusage
  exit 1
fi

# Determine self location
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Start program with libheapusage
if [ "$(uname)" == "Darwin" ]; then
  # Mac OS X
  LIBNAME="libheapusage.dylib"

  # Supported library paths
  LIBPATHS=(
    "${DIR}/../lib/${LIBNAME}"
    "${DIR}/.libs/${LIBNAME}"
    "${DIR}/${LIBNAME}"
  )

  # Iterate through library paths
  CNT=0
  while [ "${LIBPATHS[CNT]}" != "" ]; do
    LIBPATH="${LIBPATHS[CNT]}"
    if [ -e "${LIBPATH}" ]; then
      if [ "${OUTFILE}" == "" ]; then
        # Create temporary output dir and set up log file path
        TMP=$(mktemp -d)
        TMPLOG="${TMP}/heapusage.log"
        # Run program
        HU_FILE="${TMPLOG}" HU_MINLEAK="${MINLEAK}" HU_NOSYMS="${NOSYMS}" \
          DYLD_INSERT_LIBRARIES="${LIBPATH}" DYLD_FORCE_FLAT_NAMESPACE=1 "${@:1}"
        RV=${?}
        if [ -f "${TMPLOG}" ]; then
          cat "${TMPLOG}" >&2
        else
          echo "error: unable to preload libheapusage"
        fi
        rm -rf "${TMP}" 2> /dev/null
        exit ${RV}
      else
        # Run program
        HU_FILE="${OUTFILE}" HU_MINLEAK="${MINLEAK}" HU_NOSYMS="${NOSYMS}" \
          DYLD_INSERT_LIBRARIES="${LIBPATH}" DYLD_FORCE_FLAT_NAMESPACE=1 "${@:1}"
        RV=${?}
        if [ ! -f "${OUTFILE}" ]; then
          echo "error: unable to preload libheapusage"
        fi
        exit ${RV}
      fi
    fi
    CNT=$((${CNT} + 1))
  done
  
  # Report error if library not found
  echo "error: unable to determine path of ${LIBNAME}"
  exit 1

elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
  # GNU/Linux
  LIBNAME="libheapusage.so"

  # Supported library paths
  LIBPATHS=(
    "${DIR}/../lib/${LIBNAME}"
    "${DIR}/.libs/${LIBNAME}"
    "${DIR}/${LIBNAME}"
  )

  # Iterate through library paths
  CNT=0
  while [ "${LIBPATHS[CNT]}" != "" ]; do
    LIBPATH="${LIBPATHS[CNT]}"
    if [ -e "${LIBPATH}" ]; then
      if [ "${OUTFILE}" == "" ]; then
        # Create temporary output dir and set up log file path
        TMP=$(mktemp -d)
        TMPLOG="${TMP}/heapusage.log"
        # Run program
        HU_FILE="${TMPLOG}" HU_MINLEAK="${MINLEAK}" HU_NOSYMS="${NOSYMS}" LD_PRELOAD="${LIBPATH}" "${@:1}"
        RV=${?}
        if [ -f "${TMPLOG}" ]; then
          cat "${TMPLOG}" >&2
        else
          echo "error: unable to preload libheapusage"
        fi
        rm -rf "${TMP}" 2> /dev/null
        exit ${RV}
      else
        # Run program
        HU_FILE="${OUTFILE}" HU_MINLEAK="${MINLEAK}" HU_NOSYMS="${NOSYMS}" LD_PRELOAD="${LIBPATH}" "${@:1}"
        RV=${?}
        if [ ! -f "${OUTFILE}" ]; then
          echo "error: unable to preload libheapusage"
        fi
        exit ${RV}
      fi
    fi
    CNT=$((${CNT} + 1))
  done
  
  # Report error if library not found
  echo "error: unable to determine path of ${LIBNAME}"
  exit 1

else
  # Unsupported OS
  echo "Unsupported OS"
fi

exit 1

